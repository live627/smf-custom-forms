<?php

/**
 * @package   Custom Form mod
 * @version   4.1.0
 * @author    John Rayes <live627@gmail.com>
 * @copyright Copyright (c) 2014, John Rayes
 * @license   http://opensource.org/licenses/MIT MIT
 */

declare(strict_types=1);

namespace CustomForm;

trait FieldTrait
{
	public string $input_html = '';

	public string $output_html = '';

	protected array $err = [];

	protected bool $exists;

	protected array $type_vars = [];

	protected int $size = 0;

	protected string $default = '';

	protected bool $required = false;

	public function __construct(protected Field $field, protected string $value)
	{
		$this->exists = $value != '';

		$temp = $this->field->type_vars != ''
			? array_map('trim', explode(',', $this->field->type_vars))
			: [];

		if ($temp != []) {
			foreach ($temp as $var) {
				if (str_starts_with($var, 'size=')) {
					$this->size = (int) (substr($var, 5));
				} elseif (str_starts_with($var, 'default=')) {
					$this->default = substr($var, 8);
				} elseif ($var == 'required') {
					$this->required = true;
				} elseif ($var != '') {
					$this->type_vars[] = $var;
				}
			}
		}
	}

	public function isRequired(): bool
	{
		return $this->required;
	}

	/*
	 * Gets the error generated by the validation method.
	 *
	 * @return array
	 */
	public function getError(): array
	{
		return $this->err;
	}

	/**
	 * Returns the input so the user can enter a value.
	 *
	 */
	public function getInputHtml(): string
	{
		return $this->input_html;
	}

	/**
	 * Returns the output. It's the field's value formatted acccording to its criteria.
	 *
	 */
	public function getOutputHtml(): string
	{
		return $this->output_html;
	}
}
